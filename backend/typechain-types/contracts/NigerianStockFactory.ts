/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace NigerianStockFactory {
  export type TokenDeploymentDataStruct = {
    name: string;
    symbol: string;
    stockSymbol: string;
    companyName: string;
    maxSupply: BigNumberish;
    initialSupply: BigNumberish;
  };

  export type TokenDeploymentDataStructOutput = [
    name: string,
    symbol: string,
    stockSymbol: string,
    companyName: string,
    maxSupply: bigint,
    initialSupply: bigint
  ] & {
    name: string;
    symbol: string;
    stockSymbol: string;
    companyName: string;
    maxSupply: bigint;
    initialSupply: bigint;
  };
}

export interface NigerianStockFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allTokens"
      | "batchDeployStockTokens"
      | "deployStockToken"
      | "getAllTokens"
      | "getTokenAddress"
      | "getTokenCount"
      | "getTokenInfo"
      | "isRegisteredStockToken"
      | "isStockToken"
      | "owner"
      | "renounceOwnership"
      | "stockTokens"
      | "transferOwnership"
      | "updateStockToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "StockTokenDeployed"
      | "TokenUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDeployStockTokens",
    values: [NigerianStockFactory.TokenDeploymentDataStruct[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployStockToken",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredStockToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStockToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stockTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStockToken",
    values: [string, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchDeployStockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployStockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredStockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStockToken",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StockTokenDeployedEvent {
  export type InputTuple = [
    stockSymbol: string,
    tokenAddress: AddressLike,
    name: string,
    companyName: string,
    maxSupply: BigNumberish
  ];
  export type OutputTuple = [
    stockSymbol: string,
    tokenAddress: string,
    name: string,
    companyName: string,
    maxSupply: bigint
  ];
  export interface OutputObject {
    stockSymbol: string;
    tokenAddress: string;
    name: string;
    companyName: string;
    maxSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenUpdatedEvent {
  export type InputTuple = [
    stockSymbol: string,
    oldAddress: AddressLike,
    newAddress: AddressLike
  ];
  export type OutputTuple = [
    stockSymbol: string,
    oldAddress: string,
    newAddress: string
  ];
  export interface OutputObject {
    stockSymbol: string;
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NigerianStockFactory extends BaseContract {
  connect(runner?: ContractRunner | null): NigerianStockFactory;
  waitForDeployment(): Promise<this>;

  interface: NigerianStockFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  batchDeployStockTokens: TypedContractMethod<
    [
      _tokenData: NigerianStockFactory.TokenDeploymentDataStruct[],
      _admin: AddressLike
    ],
    [string[]],
    "nonpayable"
  >;

  deployStockToken: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _stockSymbol: string,
      _companyName: string,
      _maxSupply: BigNumberish,
      _initialSupply: BigNumberish,
      _admin: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  getAllTokens: TypedContractMethod<[], [string[]], "view">;

  getTokenAddress: TypedContractMethod<
    [_stockSymbol: string],
    [string],
    "view"
  >;

  getTokenCount: TypedContractMethod<[], [bigint], "view">;

  getTokenInfo: TypedContractMethod<
    [_stockSymbol: string],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        tokenAddress: string;
        name: string;
        symbol: string;
        companyName: string;
        totalSupply: bigint;
        maxSupply: bigint;
        decimals: bigint;
      }
    ],
    "view"
  >;

  isRegisteredStockToken: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [boolean],
    "view"
  >;

  isStockToken: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  stockTokens: TypedContractMethod<[arg0: string], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateStockToken: TypedContractMethod<
    [_stockSymbol: string, _newTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "batchDeployStockTokens"
  ): TypedContractMethod<
    [
      _tokenData: NigerianStockFactory.TokenDeploymentDataStruct[],
      _admin: AddressLike
    ],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployStockToken"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _stockSymbol: string,
      _companyName: string,
      _maxSupply: BigNumberish,
      _initialSupply: BigNumberish,
      _admin: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTokenAddress"
  ): TypedContractMethod<[_stockSymbol: string], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenInfo"
  ): TypedContractMethod<
    [_stockSymbol: string],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        tokenAddress: string;
        name: string;
        symbol: string;
        companyName: string;
        totalSupply: bigint;
        maxSupply: bigint;
        decimals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegisteredStockToken"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isStockToken"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stockTokens"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateStockToken"
  ): TypedContractMethod<
    [_stockSymbol: string, _newTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "StockTokenDeployed"
  ): TypedContractEvent<
    StockTokenDeployedEvent.InputTuple,
    StockTokenDeployedEvent.OutputTuple,
    StockTokenDeployedEvent.OutputObject
  >;
  getEvent(
    key: "TokenUpdated"
  ): TypedContractEvent<
    TokenUpdatedEvent.InputTuple,
    TokenUpdatedEvent.OutputTuple,
    TokenUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "StockTokenDeployed(string,address,string,string,uint256)": TypedContractEvent<
      StockTokenDeployedEvent.InputTuple,
      StockTokenDeployedEvent.OutputTuple,
      StockTokenDeployedEvent.OutputObject
    >;
    StockTokenDeployed: TypedContractEvent<
      StockTokenDeployedEvent.InputTuple,
      StockTokenDeployedEvent.OutputTuple,
      StockTokenDeployedEvent.OutputObject
    >;

    "TokenUpdated(string,address,address)": TypedContractEvent<
      TokenUpdatedEvent.InputTuple,
      TokenUpdatedEvent.OutputTuple,
      TokenUpdatedEvent.OutputObject
    >;
    TokenUpdated: TypedContractEvent<
      TokenUpdatedEvent.InputTuple,
      TokenUpdatedEvent.OutputTuple,
      TokenUpdatedEvent.OutputObject
    >;
  };
}
